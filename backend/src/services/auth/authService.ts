import { PrismaClient } from "@prisma/client";
import crypto from "crypto";
import bcrypt from "bcrypt";
import sendEmail from "../../utils/emailService";

const prisma = new PrismaClient();

/**
 * Gera um cÃ³digo OTP para redefiniÃ§Ã£o de senha e envia via e-mail.
 */
export const generateResetToken = async (email: string) => {
    const user = await prisma.usuarios.findUnique({
      where: { email },
    });
  
    if (!user) {
      throw new Error("UsuÃ¡rio nÃ£o encontrado.");
    }
  
    // ğŸ”¹ Garante que o token nunca serÃ¡ `undefined`
    const resetToken = crypto.randomBytes(3).toString("hex").toUpperCase(); // Ex: "A1B2C3"
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // ğŸ”¹ Expira em 10 minutos
  
    // ğŸ”¹ Atualiza o usuÃ¡rio com o token e a data de expiraÃ§Ã£o
    const updatedUser = await prisma.usuarios.update({
      where: { id: user.id },
      data: {
        resetToken,
        resetTokenExpires: expiresAt,
      },
    });
  
    // ğŸ”¹ VerificaÃ§Ã£o extra para debug
    console.log("âœ… Token gerado:", updatedUser.resetToken);
    console.log("âœ… ExpiraÃ§Ã£o:", updatedUser.resetTokenExpires);
  
    // ğŸ”¹ Envia e-mail com o cÃ³digo
    await sendEmail(user.email, "CÃ³digo de RedefiniÃ§Ã£o de Senha", `Seu cÃ³digo: ${resetToken}`);
  
    return { message: "CÃ³digo enviado para seu e-mail!" };
  };

/**
 * Valida o cÃ³digo OTP e redefine a senha do usuÃ¡rio.
 */
export const resetPassword = async (email: string, token: string, novaSenha: string) => {
  const user = await prisma.usuarios.findFirst({
    where: {
      email,
      resetToken: token,
      resetTokenExpires: { gte: new Date() }, // ğŸ”¹ Verifica se ainda Ã© vÃ¡lido
    },
  });

  if (!user) {
    throw new Error("CÃ³digo invÃ¡lido ou expirado.");
  }

  // ğŸ”¹ Criptografa a nova senha
  const hashedPassword = await bcrypt.hash(novaSenha, 10);

  // ğŸ”¹ Atualiza a senha no banco e apaga o token
  await prisma.usuarios.update({
    where: { id: user.id },
    data: {
      senha: hashedPassword,
      resetToken: null,
      resetTokenExpires: null,
    },
  });

  // ğŸ”¹ Notifica o usuÃ¡rio que a senha foi alterada
  await sendEmail(user.email, "Senha Alterada", "Sua senha foi redefinida com sucesso.");

  return { message: "Senha alterada com sucesso!" };
};